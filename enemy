import pygame
from collections import deque
from config import TILE_SIZE
from game_map import*

class Enemy:
    def __init__(self, x, y, color=(255, 0, 0), speed=0.1):
        self.x = x
        self.y = y
        self.color = color
        self.speed = speed
        self.path = []
        self.path_index = 0

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, TILE_SIZE, TILE_SIZE))

    def move_towards_pacman(self, pacman):
        if not self.path or self.path_index >= len(self.path):
            self.path = self.find_path((self.x // TILE_SIZE, self.y // TILE_SIZE),
                                       (pacman.x // TILE_SIZE, pacman.y // TILE_SIZE))
            self.path_index = 0

        if self.path:
            if self.path_index < len(self.path):
                next_tile = self.path[int(self.path_index)]
                self.x = next_tile[0] * TILE_SIZE
                self.y = next_tile[1] * TILE_SIZE
                self.path_index += self.speed

    def find_path(self, start, goal):
        rows, cols = len(MAP), len(MAP[0])
        visited = [[False for _ in range(cols)] for _ in range(rows)]
        parent = [[None for _ in range(cols)] for _ in range(rows)]

        queue = deque()
        queue.append(start)
        visited[start[1]][start[0]] = True

        while queue:
            x, y = queue.popleft()
            if (x, y) == goal:
                break

            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < cols and 0 <= ny < rows and not visited[ny][nx] and MAP[ny][nx] != 1 and MAP[ny][nx] != 2:
                    queue.append((nx, ny))
                    visited[ny][nx] = True
                    parent[ny][nx] = (x, y)


        path = []
        x, y = goal
        while parent[y][x] is not None:
            path.insert(0, (x, y))
            x, y = parent[y][x]

        return path
